{"version":3,"sources":["components/Header.tsx","components/Result.tsx","components/Footer.tsx","pages/App.tsx","serviceWorker.ts","index.tsx"],"names":["Title","styled","div","width","height","display","justifyContent","alignItems","fontSize","color","backgroundColor","Header","ButtonWrap","button","props","margin","borderRadius","enable","Button","url","href","style","textDecoration","pointerEvents","onClick","e","console","log","Result","Text","position","bottom","Footer","App","useState","result","setResult","delay","onScan","scanResult","onError","err","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wPAGMA,EAAQC,IAAOC,IAAI,CACvBC,MAAO,OACPC,OAAQ,OACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,SAAU,SACVC,MAAO,UACPC,gBAAiB,YAWJC,EARe,WAC5B,OACE,kBAACX,EAAD,wBCbEY,EAAaX,IAAOY,QAAO,SAACC,GAAD,MAA+B,CAC9DT,QAAS,OACTC,eAAgB,SAChBS,OAAQ,YACRZ,MAAO,MACPC,OAAQ,OACRY,aAAc,OACdN,gBAAiBI,EAAMG,OAAS,UAAY,cAGxCC,EAAoD,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,IAAKF,EAAY,EAAZA,OAI/D,OACE,uBAAGG,KAAMD,EAAKE,MAAO,CAAEC,eAAgB,OAAQC,cAAeN,EAAS,OAAS,SAC9E,kBAACL,EAAD,CAAYK,OAAQA,GAClB,4BAAQI,MAAO,CAAEZ,MAAO,UAAWD,SAAU,UAAYgB,QAN/C,SAACC,GACfC,QAAQC,IAAIF,KAKR,gBAYOG,EAN0B,SAAC,GAAW,IAAVT,EAAS,EAATA,IACzC,OACE,kBAAC,EAAD,CAAQA,IAAKA,EAAKF,SAAQE,KCzBxBU,EAAO5B,IAAOC,IAAI,CACtBC,MAAO,OACPC,OAAQ,OACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,SAAU,OACVC,MAAO,UACPC,gBAAiB,UACjBoB,SAAU,WACVC,OAAQ,IAWKC,EARe,WAC5B,OACE,kBAACH,EAAD,yBCOWI,EAnBW,WAAO,IAAD,EACFC,mBAAS,IADP,mBACvBC,EADuB,KACfC,EADe,KAI9B,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CACEC,MAAO,IACPC,OAPa,SAACC,GAAD,OAAwBA,GAAcH,EAAUG,IAQ7DC,QAPc,SAACC,GAAD,OAAgBf,QAAQC,IAAIc,IAQ1CpB,MAAO,CAAElB,MAAO,OAAQC,OAAQ,UAElC,kBAAC,EAAD,CAAQe,IAAKgB,IACb,kBAAC,EAAD,QCRcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.25aa2bdd.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Title = styled.div({\n  width: '100%',\n  height: '50px',\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  fontSize: '1.8rem',\n  color: '#fafafa',\n  backgroundColor: '#377aaf',\n});\n\nconst Header: React.SFC<{}> = () => {\n  return (\n    <Title>\n      QR Code Reader\n    </Title>\n  )\n}\n\nexport default Header;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst ButtonWrap = styled.button((props: {enable: boolean}) => ({\n  display: 'flex',\n  justifyContent: 'center',\n  margin: '30px auto',\n  width: '40%',\n  height: '30px',\n  borderRadius: '10px',\n  backgroundColor: props.enable ? '#5cc1b3' : '#757882',\n}));\n\nconst Button: React.SFC<{url: string, enable: boolean}> = ({url, enable}) => {\n  const onClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    console.log(e);\n  }\n  return (\n    <a href={url} style={{ textDecoration: 'none', pointerEvents: enable ? 'auto' : 'none' }}>\n      <ButtonWrap enable={enable}>\n        <button style={{ color: '#fafafa', fontSize: '1.2rem' }} onClick={onClick}>Open Link</button>\n      </ButtonWrap>\n    </a>\n  )\n}\n\nconst Result: React.SFC<{url: string}> = ({url}) => {\n  return (\n    <Button url={url} enable={url ? true : false} />\n  )\n}\n\nexport default Result;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Text = styled.div({\n  width: '100%',\n  height: '30px',\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  fontSize: '1rem',\n  color: '#fafafa',\n  backgroundColor: '#377aaf',\n  position: 'absolute',\n  bottom: 0,\n});\n\nconst Footer: React.SFC<{}> = () => {\n  return (\n    <Text>\n      Â© 2020 ihch.\n    </Text>\n  )\n}\n\nexport default Footer;\n","import React, { useState } from 'react';\nimport QrReader from 'react-qr-reader'\nimport Header from '../components/Header';\nimport Result from '../components/Result';\nimport Footer from '../components/Footer';\n\nconst App: React.FC<{}> = () => {\n  const [result, setResult] = useState('')\n  const handleScan = (scanResult: string) => scanResult && setResult(scanResult);\n  const handleError = (err: Error) => console.log(err);\n  return (\n    <div>\n      <Header />\n      <QrReader\n        delay={300}\n        onScan={handleScan}\n        onError={handleError}\n        style={{ width: '100%', height: 'auto' }}\n      />\n      <Result url={result} />\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL || '',\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pages/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}